name: build-and-deploy
on:
  push:
    branches: [prod]

env:
  APP_DIR: /opt/nnp-web
  PM2_NAME: nnp-web
  NODE_VERSION: '20'
  BUILD_DIR: build                      # change if your server output differs
  PM2_HOME: /home/dsn/.pm2              # ensure PM2 state is writable by 'dsn'

jobs:
  build-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Debug whoami & perms
        run: |
          echo "USER: $(whoami)"
          id
          echo "--- DIR perms ---"
          ls -ld /opt /opt/nnp-web || true
          echo "--- TOUCH test ---"
          mkdir -p "$APP_DIR"
          > "$APP_DIR/.gh-actions-write-test" && echo "write ok" || { echo "::error::Cannot write to $APP_DIR"; exit 1; }

      - name: Sync to $APP_DIR (no sudo)
        run: |
          EXCLUDES="
            --exclude .git
            --exclude .github
            --exclude node_modules
            --exclude ${BUILD_DIR}
            --exclude dist
            --exclude .next
            --exclude .cache
          "
          if command -v rsync >/dev/null; then
            rsync -a --delete $EXCLUDES ./ "$APP_DIR"/
          else
            # fallback if rsync missing
            shopt -s dotglob
            for p in *; do
              case "$p" in
                .git|.github|node_modules|${BUILD_DIR}|dist|.next|.cache) continue ;;
              esac
              rm -rf "$APP_DIR/$p"
              cp -a "$p" "$APP_DIR/"
            done
          fi
          # keep local environment if already present on server
          [ -f "$APP_DIR/.env" ] && echo "Keeping existing $APP_DIR/.env"

      - name: Install deps (include dev)
        working-directory: ${{ env.APP_DIR }}
        run: npm ci --no-audit --no-fund

      - name: Build (Tailwind plugin in devDependencies)
        working-directory: ${{ env.APP_DIR }}
        env:
          NODE_ENV: development
        run: npm run build

      - name: Prune dev deps for runtime
        working-directory: ${{ env.APP_DIR }}
        run: npm prune --omit=dev

      # Use local pm2 so we don't rely on a root/global install
      - name: Ensure pm2 (local)
        working-directory: ${{ env.APP_DIR }}
        run: |
          jq '.dependencies.pm2? // empty' package.json >/dev/null 2>&1 || npm i -E pm2@latest

      - name: Restart app with PM2 (local)
        working-directory: ${{ env.APP_DIR }}
        env:
          PM2_HOME: ${{ env.PM2_HOME }}
        run: |
          npx pm2 delete "${PM2_NAME}" || true
          npx pm2 start "./${BUILD_DIR}/server/index.js" --name "${PM2_NAME}" --update-env
          npx pm2 save
          npx pm2 status || true
